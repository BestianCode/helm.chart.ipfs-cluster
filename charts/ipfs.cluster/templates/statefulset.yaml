apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ipfs-cluster.statefulsetName" . }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  serviceName: {{ include "ipfs-cluster.serviceName" . }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        checksum/config-bootstrap: {{ include (print $.Template.BasePath "/configmap-bootstrap.yaml") . | sha256sum }}
        checksum/config-env: {{ include (print $.Template.BasePath "/configmap-env.yaml") . | sha256sum }}
    spec:
      initContainers:
        - name: configure-ipfs
          image: {{ .Values.ipfsImage.repo }}:{{ .Values.ipfsImage.tag }}
          command: ["sh", "/custom/configure-ipfs.sh"]
          volumeMounts:
            - name: ipfs-storage
              mountPath: /data/ipfs
            - name: cluster-storage
              mountPath: /data/ipfs-cluster
            - name: configure-script
              mountPath: /custom
      containers:
        - name: ipfs
          image: {{ .Values.ipfsImage.repo }}:{{ .Values.ipfsImage.tag }}
          imagePullPolicy: IfNotPresent
          env:
            - name: IPFS_FD_MAX
              value: "4096"
          ports:
            - name: swarm
              protocol: TCP
              containerPort: 4001
            - name: api
              protocol: TCP
              containerPort: 5001
            - name: gateway
              protocol: TCP
              containerPort: 8080
          readinessProbe:
            tcpSocket:
              port: swarm
            initialDelaySeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: swarm
            initialDelaySeconds: 5
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 2
            periodSeconds: 10
          volumeMounts:
            - name: ipfs-storage
              mountPath: /data/ipfs
            - name: configure-script
              mountPath: /custom
          resources:
            {}
        - name: ipfs-cluster
          image: {{ .Values.ipfsClusterImage.repo }}:{{ .Values.ipfsClusterImage.tag }}
          imagePullPolicy: IfNotPresent
          command: ["sh", "/custom/entrypoint.sh"]
          envFrom:
            - configMapRef:
                name: {{ include "ipfs-cluster.configmapEnvName" . }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: BOOTSTRAP_PEER_ID
              valueFrom:
                configMapKeyRef:
                  name: {{ include "ipfs-cluster.configmapEnvName" . }}
                  key: bootstrap-peer-id
            - name: BOOTSTRAP_PEER_PRIV_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "ipfs-cluster.secretName" . }}
                  key: bootstrap-peer-priv-key
            - name: CLUSTER_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "ipfs-cluster.secretName" . }}
                  key: cluster-secret
            - name: CLUSTER_MONITORPINGINTERVAL
              value: {{ .Values.clusterMoitorPingInterval | quote }}
            - name: CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS
              value: "/ip4/0.0.0.0/tcp/9094"
            - name: CLUSTER_IPFSHTTP_NODEMULTIADDRESS
              value: "/ip4/127.0.0.1/tcp/5001"
            - name: CLUSTER_CRDT_TRUSTEDPEERS
              value: {{ .Values.clusterCRDTtrustedPeers | quote }}
          ports:
            - name: api-http
              containerPort: 9094
              protocol: TCP
            - name: proxy-http
              containerPort: 9095
              protocol: TCP
            - name: cluster-swarm
              containerPort: 9096
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: cluster-swarm
            initialDelaySeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: cluster-swarm
            initialDelaySeconds: 5
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 2
            periodSeconds: 10
          volumeMounts:
            - name: cluster-storage
              mountPath: /data/ipfs-cluster
            - name: configure-script
              mountPath: /custom
          resources:
            {}
      volumes:
        - name: configure-script
          configMap:
            name: {{ include "ipfs-cluster.configmapBootstrapName" . }}
        {{ if ne .Values.persistence.enabled true }}
        - name: cluster-storage
          emptyDir: {}
        - name: ipfs-storage
          emptyDir: {}
        {{ else }}
  volumeClaimTemplates:
    - metadata:
        name: cluster-storage
      spec:
        storageClassName: {{ .Values.persistence.storageClass }}
        accessModes: {{ .Values.persistence.accessModes }}
        resources:
          requests:
            storage: {{ .Values.persistence.clusterStorage.size }}Gi
    - metadata:
        name: ipfs-storage
      spec:
        storageClassName: {{ .Values.persistence.storageClass }}
        accessModes: {{ .Values.persistence.accessModes }}
        resources:
          requests:
            storage: {{ .Values.persistence.ipfsStorage.size }}Gi
        {{ end }}
